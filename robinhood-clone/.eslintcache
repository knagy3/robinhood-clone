[{"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\index.js":"1","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\App.js":"2","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\reportWebVitals.js":"3","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\Header.js":"4","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\Stats.js":"5","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\NewsFeed.js":"6","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\LineGraph.js":"7","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\TimeLine.js":"8","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\api.js":"9","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\StatsRow.js":"10","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\firebase.js":"11","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\reducer.js":"12","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\StateProvider.js":"13"},{"size":690,"mtime":1607631231238,"results":"14","hashOfConfig":"15"},{"size":423,"mtime":1607631706296,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":923,"mtime":1606853831250,"results":"18","hashOfConfig":"15"},{"size":3524,"mtime":1607874330923,"results":"19","hashOfConfig":"15"},{"size":6211,"mtime":1607879909916,"results":"20","hashOfConfig":"15"},{"size":3840,"mtime":1607878927284,"results":"21","hashOfConfig":"15"},{"size":1375,"mtime":1607863088210,"results":"22","hashOfConfig":"15"},{"size":882,"mtime":1607879455519,"results":"23","hashOfConfig":"15"},{"size":1811,"mtime":1607329310136,"results":"24","hashOfConfig":"15"},{"size":615,"mtime":1607173201317,"results":"25","hashOfConfig":"15"},{"size":645,"mtime":1607874909587,"results":"26","hashOfConfig":"15"},{"size":378,"mtime":1607631688704,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16j330z",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\index.js",[],["60","61"],"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\App.js",[],"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\reportWebVitals.js",[],"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\Header.js",["62"],"import React from 'react';\r\nimport \"./Header.css\"\r\nimport Logo from \"./robinhood.svg\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__logo\">\r\n                <img src={Logo}/>\r\n            </div>\r\n                \r\n            <div className=\"header__search\">\r\n                <div className=\"header__searchContainer\">\r\n                    <SearchOutlined />\r\n                    <input placeholder=\"Search\" type=\"text\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"header__menuItems\">\r\n                <a href=\"/\">Free Stocks</a>\r\n                <a href=\"/\">PortFolio</a>\r\n                <a href=\"/\">Cash</a>\r\n                <a href=\"/\">Messages</a>\r\n                <a href=\"/\">Account</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\Stats.js",["63","64","65"],"import React, {useState, useEffect} from 'react'\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport \"./Stats.css\"\r\nimport { key } from \"./api\";\r\nimport axios from \"axios\";\r\nimport StatsRow from './StatsRow';\r\nimport { database } from \"./firebase\";\r\n\r\nconst BASE_URL = \"https://finnhub.io/api/v1/quote?symbol=\";\r\nconst KEY_URL = `&token=${key}`;\r\n\r\nfunction Stats() {\r\n    const [stocksData, setStocksData] = useState([]);\r\n    const [myStocks, setMyStocks] = useState([]);\r\n\r\n    const getMyStocks = () => {\r\n        database\r\n        .collection('myStocks')\r\n        .onSnapshot( (snapshot) => {\r\n            let promises = [];\r\n            let tempData = [];\r\n\r\n            snapshot.docs.map((doc) => {\r\n              promises.push(getStocksData( doc.data().ticker )\r\n              .then( (res) => {\r\n                tempData.push({\r\n                  id: doc.id,\r\n                  data: doc.data(),\r\n                  info: res.data\r\n                })\r\n              })\r\n            )})\r\n            Promise.all(promises).then(() => {\r\n                setMyStocks(tempData);\r\n            })\r\n        })\r\n    };\r\n\r\n    const getStocksData = (stock) => {\r\n        return axios\r\n        .get(`${BASE_URL}${stock}${KEY_URL}`)\r\n        .catch((error) => {\r\n            console.error(\"Error\", error.message);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const stocksList = [\"AAPL\", \"MSFT\", \"TSLA\", \"FB\", \"BABA\", \"UBER\", \"DIS\", \"SBUX\"];\r\n        let testData = [];\r\n        getMyStocks();\r\n        let promises = [];\r\n\r\n        stocksList.map((stock) => {\r\n          promises.push(\r\n            getStocksData(stock)\r\n            .then((res) => {\r\n              testData.push({\r\n                name: stock,\r\n                ...res.data\r\n              });\r\n            })\r\n          )\r\n        });\r\n\r\n        Promise.all(promises).then(()=>{\r\n            setStocksData(testData);\r\n          })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"stats\">\r\n            <div className=\"stats__container\">\r\n                <div className=\"stats__header\">\r\n                    <p>Stocks</p>\r\n                    <MoreHorizIcon />\r\n                </div>\r\n                <div className=\"stats__content\">\r\n                    <div className=\"stats__rows\">\r\n                        {/*it comes from the database*/}\r\n                        {myStocks.map((stock) => (\r\n                            <StatsRow\r\n                                key={stock.data.ticker}\r\n                                name={stock.data.ticker}\r\n                                openPrice={stock.info.o}\r\n                                volume={stock.data.shares}\r\n                                price={stock.info.c}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"stats__header stats__lists\">\r\n                    <p>List</p>\r\n                </div>\r\n                <div className=\"stats__content\">\r\n                    <div className=\"stats__rows\">\r\n                        {stocksData.map((stock) => (\r\n                            <StatsRow\r\n                                key={stock.name}\r\n                                name={stock.name}\r\n                                openPrice={stock.o}\r\n                                price={stock.c}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats\r\n","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\NewsFeed.js",["66","67","68"],"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\LineGraph.js",["69","70","71"],"import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { key, options } from \"./api\";\r\nimport axios from \"axios\";\r\nimport moment from 'moment'\r\nimport \"./LineGraph.css\"\r\nimport { useStateValue } from './StateProvider';\r\n\r\n//const BASE_URL = \"https://finnhub.io/api/v1/quote?symbol=\";\r\n\r\n\r\n\r\nfunction LineGraph() {\r\n  const [data, setData] = useState({});\r\n  //const [stocksData, setStocksData] = useState([]);\r\n  const [{choosedDate, choosedShare}, dispatch] = useStateValue();\r\n  //const [choosedDate, dispatch] = useStateValue();\r\n\r\n  const getDateUnix = (date) => {\r\n    let displayDate = {}\r\n    let today = moment().format('MM/DD/YYYY, hh:mm:ss a');\r\n\r\n    switch (date) {\r\n      case \"D\":\r\n        displayDate = {\r\n          from:  moment(moment().subtract(1, 'days').calendar()).unix(),\r\n          to:  moment(today).unix()\r\n        };\r\n        break;\r\n      case \"W\":\r\n        displayDate = {\r\n          from:  moment(moment().subtract(7, 'days').calendar()).unix(),\r\n          to:  moment(today).unix()\r\n        };\r\n        break;\r\n      case \"M\":\r\n        displayDate = {\r\n          from:  moment(moment().subtract(1, 'months').calendar()).unix(),\r\n          to:  moment(today).unix()\r\n        };\r\n        break;\r\n      case \"Y\":\r\n        displayDate = {\r\n          from:  moment(moment().subtract(11, 'months').calendar()).unix(),\r\n          to:  moment(today).unix()\r\n        };\r\n        break;\r\n      default:\r\n        displayDate = {\r\n          from:  moment(moment().startOf('day').format('MM/DD/YYYY, hh:mm:ss a')).unix(),\r\n          to:  moment(today).unix()\r\n        };\r\n        break;\r\n    }\r\n    return displayDate;\r\n  };\r\n\r\n  const getStocksData = (stock) => {\r\n    let resolution = null;\r\n    choosedDate.choosedDate == \"Y\" ? resolution = \"D\" : resolution = \"15\";\r\n    const displayDate = getDateUnix(choosedDate.choosedDate);\r\n    console.log(stock, displayDate);\r\n    const BASE_URL = `https://finnhub.io/api/v1/stock/candle?symbol=${stock}&resolution=${resolution}&from=${displayDate.from}&to=${displayDate.to}`;\r\n    const KEY_URL = `&token=${key}`;\r\n\r\n    return axios\r\n    .get(`${BASE_URL}${KEY_URL}`)\r\n    .catch((error) => {\r\n        console.error(\"Error\", error.message);\r\n    });\r\n  };\r\n\r\n  const buildChartData = (stocksData) => {\r\n    let chartData = [];\r\n    for (let i in stocksData[0].t) {\r\n      let formatted = moment.unix(stocksData[0].t[i]).format('MM/DD/YYYY, hh:mm:ss a');\r\n      let newDateObject = {\r\n        x: formatted,\r\n        y: stocksData[0].c[i]\r\n      };\r\n      chartData.push(newDateObject);\r\n    };\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let testData = [];\r\n    let promises = [];\r\n\r\n    promises.push(\r\n      getStocksData(choosedShare)\r\n      .then((res) => {\r\n        console.log(res);\r\n        testData.push({\r\n          name: choosedShare,\r\n          ...res?.data\r\n        });\r\n      })\r\n    );\r\n    Promise.all(promises).then(() => {\r\n      let chartData = buildChartData(testData);\r\n      setData(chartData);\r\n    })\r\n  }, [choosedDate, choosedShare]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                type: 'line',\r\n                backgroundColor: \"black\",\r\n                borderColor: \"#5AC53B\",\r\n                borderWidth: 2,\r\n                pointBorderColor: 'rgba(0, 0, 0, 0)',\r\n                pointBackgroundColor: 'rgba(0, 0, 0, 0)',\r\n                pointHoverBackgroundColor: '#5AC53B',\r\n                pointHoverBorderColor: '#000000',\r\n                pointHoverBorderWidth: 4,\r\n                pointHoverRadius: 6,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\TimeLine.js",["72"],"import React, {useState} from 'react';\r\nimport \"./TimeLine.css\";\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction TimeLine() {\r\n    const [{choosedDate}, dispatch] = useStateValue();\r\n    const [state, setState] = useState(\"W\");\r\n\r\n    const handleClick = (date) => {\r\n        setState(date);\r\n        dispatch({\r\n            type: \"SET_DATE\",\r\n            choosedDate: date,\r\n        });\r\n    };\r\n    \r\n    return (\r\n        <div className=\"timeline__container\">\r\n            <div className=\"timeline__buttons__container\">\r\n                {/*<div className={ state ? \"timeline__button\" : \"timeline__button active\"} onClick={() => handleClick(\"D\")}>LIVE</div>*/}\r\n                <div className={ state===\"D\" ? \"timeline__button active\" : \"timeline__button \"} onClick={() => handleClick(\"D\")}>1D</div>\r\n                <div className={ state===\"W\" ? \"timeline__button active\" : \"timeline__button \"} onClick={() => handleClick(\"W\")}>1W</div>\r\n                <div className={ state===\"M\" ? \"timeline__button active\" : \"timeline__button \"} onClick={() => handleClick(\"M\")}>1M</div>\r\n                <div className={ state===\"Y\" ? \"timeline__button active\": \"timeline__button \"} onClick={() => handleClick(\"Y\")}>1Y</div>                                                                    \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeLine;\r\n","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\api.js",[],"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\StatsRow.js",["73"],"import React from 'react';\r\nimport \"./StatsRow.css\";\r\nimport StockChart from './stock.svg';\r\nimport { database } from \"./firebase\";\r\n\r\nfunction StatsRow({ name, openPrice, volume, price}) {\r\n    const percentage = ((price - openPrice) / openPrice) * 100;\r\n    const isPositive = percentage > 0 ? true : false;\r\n\r\n    const buyMystocks = () => {\r\n        database.collection('myStocks')\r\n        .where(\"ticker\", \"==\", name).get().then((querySnapshot) => {\r\n            if(!querySnapshot.empty){\r\n                querySnapshot.forEach(function(doc) {\r\n                    // doc.data() is never undefined for query doc snapshots\r\n                    //console.log(doc.id, \" => \", doc.data());\r\n                    database.collection('myStocks').doc(doc.id).update({\r\n                        shares: doc.data().shares+=1\r\n                    })\r\n                });\r\n            } else {\r\n                // Add the new record\r\n                database.collection('myStocks').add({\r\n                    ticker: name,\r\n                    shares: 1\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"statsRow\" onClick={buyMystocks}>\r\n            <div className=\"statsRow__intro\">\r\n                <h1>{name}</h1>\r\n                <p>\r\n                    {volume && (volume + \" shares\")}\r\n                </p>\r\n            </div>\r\n            <div className=\"statsRow__chart\">\r\n                <img src={StockChart} height={16}/>\r\n            </div>\r\n            <div className=\"statsRow__numbers\">\r\n                <p className=\"statsRow__price\">${price}</p>\r\n                <p className={`statsRow__${isPositive ? \"percentageGreen\" : \"percentageRed\"}`}> {Number(percentage).toFixed(2)}%</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatsRow;\r\n","C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\firebase.js",[],"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\reducer.js",[],"C:\\Sandboxes\\web\\robinhood-clone\\robinhood-clone\\src\\StateProvider.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":10,"column":17,"nodeType":"80","endLine":10,"endColumn":34},{"ruleId":"81","severity":1,"message":"82","line":23,"column":37,"nodeType":"83","messageId":"84","endLine":23,"endColumn":39},{"ruleId":"81","severity":1,"message":"82","line":53,"column":32,"nodeType":"83","messageId":"84","endLine":53,"endColumn":34},{"ruleId":"85","severity":1,"message":"86","line":68,"column":8,"nodeType":"87","endLine":68,"endColumn":10,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":37,"column":27,"nodeType":"91","messageId":"92","endLine":37,"endColumn":36},{"ruleId":"89","severity":1,"message":"93","line":51,"column":12,"nodeType":"91","messageId":"92","endLine":51,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":100,"column":36,"nodeType":"83","messageId":"84","endLine":100,"endColumn":38},{"ruleId":"89","severity":1,"message":"94","line":16,"column":39,"nodeType":"91","messageId":"92","endLine":16,"endColumn":47},{"ruleId":"95","severity":1,"message":"96","line":60,"column":29,"nodeType":"97","messageId":"98","endLine":60,"endColumn":31},{"ruleId":"85","severity":1,"message":"99","line":104,"column":6,"nodeType":"87","endLine":104,"endColumn":33,"suggestions":"100"},{"ruleId":"89","severity":1,"message":"101","line":6,"column":13,"nodeType":"91","messageId":"92","endLine":6,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":40,"column":17,"nodeType":"80","endLine":40,"endColumn":52},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["104"],"no-unused-vars","'setTopics' is assigned a value but never used.","Identifier","unusedVar","'choosedShare' is assigned a value but never used.","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getStocksData'. Either include it or remove the dependency array.",["105"],"'choosedDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [getMyStocks]",{"range":"110","text":"111"},"Update the dependencies array to be: [choosedDate, choosedShare, getStocksData]",{"range":"112","text":"113"},[1925,1927],"[getMyStocks]",[3051,3078],"[choosedDate, choosedShare, getStocksData]"]